//---------- Queue.h ---------

#include<assert.h>
#include<stdio.h>
#include<stdlib.h>

#define EMPTY   0
#define  FULL   10000

typedef unsigned int	data;
typedef   enum { fal, tr }  boolean;

struct elem
{
	data d;
	struct   elem *next;
};

typedef struct elem elem;
struct queue
{
	int cnt;
	elem  *front;
	elem *rear;
};

typedef struct queue queue;

void initialize(queue *q);
void  enqueue(data d, queue *q);
data dequeue(queue *q);
data front(const queue *q);
boolean empty(const queue *q);
boolean full(const queue *q);


//------------------------------main.c --------

#include "queue.h"
#include <cstdint>

void initialize(queue *q)
{
	q->cnt = 0;
	q->front = NULL;
	q->rear = NULL;

}

data dequeue(queue *q)
{
	data d;
	elem *p;
	d = q->front->d;
	p = q->front;
	q->front = q->front->next;
	q->cnt--;
	return d;

}

void enqueue(data d, queue *q)
{
	elem *p;
	p = (elem*)malloc(sizeof(elem));
	p->d = d;
	p->next = NULL;
	if (!empty(q))
	{
		q->rear->next = p;
		q->rear = p;

	}
	else
		q->front = q->rear = p;

	q->cnt++;
}

data front(const queue *q)
{
	return (q->front->d);
}

boolean empty(const queue *q)
{
	return ((boolean)(q->cnt == EMPTY));

}

boolean full(const queue *q)
{
	return((boolean)(q->cnt == FULL));
}

int main(void)
{
	int c;
	uint16_t cnt_a = 0;
	uint16_t cnt_b = 0;
	data pid;
	queue a, b;
	
	initialize(&a);
	initialize(&b);

	//Enqueue the requests.

	while ((c = getchar()) != EOF)
	{
		switch (c)
		{
		case 'A':
			assert(scanf("%u", &pid) == 1);
			if (!full(&a))
				enqueue(pid, &a);
			break;
		case 'B':
			assert(scanf("%u", &pid) == 1);
			if (!full(&a))
				enqueue(pid, &b);
		}
	}
	//Deque the request and pritn them

	printf("\nA's schedule:\n");
	while (!empty(&a))
	{
		pid = dequeue(&a);
		printf("  JOB %u is %d\n", ++cnt_a, pid);
	}

	printf("\nB's schedule: \n");
	while (!empty(&b))
	{
		pid = dequeue(&b);
		printf("  JOB %u is %d\n", ++cnt_b, pid);
	}
	return 0;
	
}



